/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./front/index.js":
/*!************************!*\
  !*** ./front/index.js ***!
  \************************/
/***/ (() => {

eval("const submitUrlBtn = document.getElementById(\"submitLinkBtn\");\r\nconst userInputBtn = document.getElementById(\"submitUserBtn\");\r\nconst disconnectBtn = document.getElementById(\"disconnectBtn\");\r\nconst testCustomIdBtn = document.getElementById(\"testCustomId\")\r\nconst registerBtn = document.getElementById(\"registerBtn\")\r\n\r\nsubmitUrlBtn.addEventListener(\"click\", () => { addNewUrl() })\r\nuserInputBtn.addEventListener(\"click\", () => { userLogin() })\r\ndisconnectBtn.addEventListener(\"click\", () => { domDisconnect() })\r\ntestCustomIdBtn.addEventListener(\"click\", () => { isCusttomIdFree() })\r\nregisterBtn.addEventListener(\"click\", () => { userRegister() })\r\n\r\n\r\n// const validator = require(\"validator\")\r\n\r\n// import \"./index.css\";\r\n\r\nlet currUser = \"\";\r\nconst baseURL = \"http://localhost:3000\"\r\n\r\n//Requests a new url to be shortened\r\nfunction addNewUrl() {\r\n    const normalInput = document.getElementById(\"linkInput\");\r\n    const customInput = document.getElementById(\"customInput\");\r\n    if (normalInput.value) { //Check if if a url was entered\r\n        // if (validator.isURL(normalInput.value)) { //Validates the url\r\n        if (customInput.value === \"\") { //Checks if a custom id was entered\r\n            addNormalUrl(normalInput.value)\r\n        }\r\n        else {\r\n            addCustomUrl(normalInput.value, customInput.value)\r\n        }\r\n        // }\r\n        // else {\r\n        //     alert(\"Invalid url!\")\r\n        // }\r\n    }\r\n    else {\r\n        alert(\"No url entered!\")\r\n    }\r\n}\r\n\r\n//Sends a normal url to be added\r\nfunction addNormalUrl(urlToShorten) {\r\n    sendNewUrl(urlToShorten, currUser)\r\n    document.getElementById(\"resultDiv\").innerHTML = \"\";\r\n}\r\n\r\n//Return a copy button, which will copy the given text to the clipboard\r\nfunction getCopyBtn(textToCopy) {\r\n    const copyBtn = document.createElement(\"button\");\r\n    copyBtn.textContent = \"Copy URL\"\r\n    copyBtn.addEventListener(\"click\", (e) => { navigator.clipboard.writeText(textToCopy) })\r\n    return copyBtn;\r\n}\r\n\r\n//Checks if the custom url added is free\r\nasync function isCusttomIdFree() {\r\n    const customInput = document.getElementById(\"customInput\")\r\n    const customId = customInput.value;\r\n    if (customId) {\r\n        document.getElementById(\"testCustomId\").textContent = \"🔃\"\r\n        const request = await axios.get(`${baseURL}/link/check/${customId}`);\r\n        if (request.data) {\r\n            document.getElementById(\"testCustomId\").textContent = \"✔\"\r\n        }\r\n        else {\r\n            document.getElementById(\"testCustomId\").textContent = \"❌\"\r\n        }\r\n        customInput.addEventListener(\"keypress\", () => { testCustomIdBtn.textContent = \"Check if useable\" })\r\n    }\r\n    else {\r\n        alert(\"No input detected!\")\r\n    }\r\n}\r\n\r\n//User loggin\r\nfunction userLogin() {\r\n    const userNameInput = document.getElementById(\"userNameInput\")\r\n    const passwordInput = document.getElementById(\"passwordInput\")\r\n    if (userNameInput.value && passwordInput.value) {\r\n        currUser = userNameInput.value;\r\n        domLogin();\r\n    }\r\n    else {\r\n        alert(\"No user entered!\")\r\n    }\r\n}\r\nasync function userRegister() {\r\n    const userNameInput = document.getElementById(\"userNameInput\")\r\n    const passwordInput = document.getElementById(\"passwordInput\")\r\n    if (userNameInput.value && passwordInput.value) {\r\n        const response = await axios.post(`${baseURL}/register`, { username: userNameInput.value, password: passwordInput.value })\r\n    }\r\n    else {\r\n        alert(\"Missing input!\")\r\n    }\r\n}\r\n\r\n\r\n//Handles all elements related to a user when loggin in\r\nfunction domLogin() {\r\n    const userNameInput = document.getElementById(\"userNameInput\")\r\n    document.getElementById(\"customInput\").style.display = \"initial\"\r\n    document.getElementById(\"baseLinkLabel\").style.display = \"initial\"\r\n    document.getElementById(\"testCustomId\").style.display = \"initial\"\r\n\r\n    userInputBtn.style.display = \"none\";\r\n    disconnectBtn.style.display = \"initial\";\r\n    userNameInput.readOnly = true;\r\n    userNameInput.value = `Welcome ${currUser}`\r\n    domUserInfo(currUser);\r\n}\r\n\r\n//Handles all the elements related to a user when disconnecting \r\nfunction domDisconnect() {\r\n    const userNameInput = document.getElementById(\"userNameInput\")\r\n    document.getElementById(\"customInput\").style.display = \"none\"\r\n    document.getElementById(\"baseLinkLabel\").style.display = \"none\"\r\n    document.getElementById(\"testCustomId\").style.display = \"none\"\r\n    userInputBtn.style.display = \"initial\";\r\n    disconnectBtn.style.display = \"none\";\r\n    currUser = \"\";\r\n    userNameInput.readOnly = false;\r\n    userNameInput.value = \"\";\r\n    document.getElementById(\"disconnectBtn\").remove();\r\n    document.getElementById(\"userInfoDiv\").innerHTML = \"\";\r\n}\r\n\r\n//Sends a new url to shorten\r\nfunction sendNewUrl(inputUrl, userName) {\r\n    const data = { longUrl: inputUrl, username: userName }\r\n    const response = axios.post(`${baseURL}/link/create`, data)\r\n    response.then((value) => {\r\n        addResultEl(value.data)\r\n    })\r\n}\r\n\r\n//Send a request for a custom url link\r\nfunction sendNewCustomUrl(inputUrl, customId, userName) {\r\n    const data = { longUrl: inputUrl, username: userName }\r\n    const response = axios.post(`${baseURL}/link/create/${customId}`, data)\r\n    response.then((value) => {\r\n        addResultEl(value.data)\r\n    })\r\n    response.catch((value) => {\r\n        alert(\"ID already taken!\")\r\n    })\r\n}\r\n\r\n//Requests a new url to be shortened\r\nfunction addCustomUrl(fullUrl, customId) {\r\n    sendNewCustomUrl(fullUrl, customId, currUser)\r\n    document.getElementById(\"resultDiv\").innerHTML = \"\";\r\n}\r\n\r\n//Shows the result after shortning a new url\r\nfunction addResultEl(shortUrl) {\r\n    if (currUser !== \"\") {\r\n        domUserInfo(currUser)\r\n    }\r\n    const resultDiv = document.getElementById(\"resultDiv\");\r\n\r\n    const copyBtn = getCopyBtn(shortUrl);\r\n\r\n    const resultText = document.createElement(\"div\");\r\n    resultText.textContent = `Your shortened URL is: ${shortUrl}`;\r\n\r\n    resultDiv.append(resultText)\r\n    resultDiv.append(copyBtn)\r\n}\r\n\r\n//Returns a promise containing all urls by given user\r\nfunction getUrlsByUser(userName) {\r\n    const response = axios.get(`${baseURL}/link/user/${userName}`)\r\n    return response;\r\n}\r\n\r\n//Maniplutes DOM to show all urls by a given user\r\nfunction domUserInfo(userName) {\r\n    const urlsPromise = getUrlsByUser(userName);\r\n    const userInfoDiv = document.getElementById(\"userInfoDiv\");\r\n    userInfoDiv.innerHTML = \"\";\r\n    urlsPromise.then((value) => {\r\n        const urls = value.data;\r\n        for (let i = 0; i < urls.length; i++) {\r\n            const urlEl = buildUrlEl(urls[i], i + 1)\r\n            userInfoDiv.append(urlEl)\r\n        }\r\n    })\r\n}\r\n\r\n//Creates an element containing info about a url\r\nfunction buildUrlEl(urlObj, urlNum) {\r\n    const shortUrl = \"http://link-cut.herokuapp.com/link/\" + urlObj.token //change after getting heroku url\r\n    const urlEl = document.createElement(\"li\")\r\n    urlEl.textContent = `URL ${urlNum}:`;\r\n    urlEl.classList.add(\"urlInfo\")\r\n    const idDiv = document.createElement(\"div\")\r\n    idDiv.textContent = `Token: ${urlObj.token}`;\r\n    const fullUrlDiv = document.createElement(\"div\")\r\n    fullUrlDiv.textContent = `Full URL: ${urlObj.originalUrl}`;\r\n    const viewCountDiv = document.createElement(\"div\")\r\n    viewCountDiv.textContent = `Times clicked: ${urlObj.redirectCount}`;\r\n    const shortUrlDiv = document.createElement(\"div\");\r\n    shortUrlDiv.textContent = `Shortened URL: ${shortUrl}`;\r\n    const dateDiv = document.createElement(\"div\");\r\n    dateDiv.textContent = `Creation date: ${urlObj.creationDate}`;\r\n\r\n    const copyBtn = getCopyBtn(shortUrl)\r\n    urlEl.append(idDiv);\r\n    urlEl.append(dateDiv);\r\n    urlEl.append(viewCountDiv);\r\n    urlEl.append(fullUrlDiv);\r\n    urlEl.append(shortUrlDiv)\r\n    urlEl.append(copyBtn)\r\n    return urlEl;\r\n}\r\n\n\n//# sourceURL=webpack://url-shortner/./front/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./front/index.js"]();
/******/ 	
/******/ })()
;